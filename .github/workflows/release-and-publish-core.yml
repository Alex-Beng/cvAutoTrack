name: release-and-publish-core
on:
  push:
    branches: [ "release-new" ]
    paths:
      - 'source/**'
      - '.github/workflows/release-and-publish-core.yml'
  pull_request:
    branches: [ "release-new" ]
    paths:
      - 'source/**'
      - '.github/workflows/drelease-and-publish-core.yml'

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # 跳过提交信息开头为doc:或者docs:的提交
    if: "!startsWith(github.event.head_commit.message, 'doc:') && !startsWith(github.event.head_commit.message, 'docs:')"
    runs-on: self-hosted
    outputs:
      version: ${{ steps.get_version.outputs._version }}

    steps:
    - uses: actions/checkout@v3

    - name: test env
      run: |
        dir
        echo "github.workspace: ${{github.workspace}}"
        echo "github.ref: ${{github.ref}}"
        dir ${{github.workspace}}

    - name: clone third party submodule
      run: git submodule update --init --recursive

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Get the Version
      id: get_version
      run: |
        $version = (Get-Content -Path ${{github.workspace}}/build/bin/Release/version -TotalCount 1).Trim()
        echo "dll version: $version"
        echo "_version=$version" >> $env:GITHUB_OUTPUT
    
    - name: zip all dll
      run: |
        $version = (Get-Content -Path ${{github.workspace}}/build/bin/Release/version -TotalCount 1).Trim()
        echo "dll version: $version"
        Compress-Archive -Path ${{github.workspace}}/build/bin/Release/cvAutoTrack.dll -DestinationPath ${{github.workspace}}/build/bin/Release/cvAutoTrack-$version.zip
        #每个文件单独打包
        $files = $(ls ${{github.workspace}}/build/bin/Release/opencv_*.dll) 
        foreach ($file_str in $files)
        {
          $file = New-Object System.IO.FileInfo("$file_str")
          $fileNmae =  $file.BaseName
          $hash = $(Get-FileHash -Path $file_str -Algorithm MD5).Hash
          Compress-Archive -Path $file -DestinationPath ${{github.workspace}}/build/bin/Release/$fileNmae-$hash.zip
        }

    - name: Upload a Build Artifact for Release
      uses: actions/upload-artifact@v3
      with:
        name: cvAutoTrack
        path: ${{github.workspace}}/build/bin/Release/cvAutoTrack-*.zip
        if-no-files-found: 'warn'

    - name: Upload a Build Artifact for Release.Depends
      uses: actions/upload-artifact@v3
      with:
        name: cvAutoTrack.Depends
        path: ${{github.workspace}}/build/bin/Release/opencv_*.zip
        if-no-files-found: 'warn'
  
  push-file:
    if: github.ref == 'refs/heads/release-new'
    needs: build
    runs-on: self-hosted
    env:
      version: ${{ needs.build.outputs.version }}
    steps:
    - uses: actions/checkout@v3
  
    - name: Download a Build Artifact for Core
      uses: actions/download-artifact@v3
      with:
        name: cvAutoTrack
        path: ${{github.workspace}}/Release/

    - name: Download a Build Artifact for Depends
      uses: actions/download-artifact@v3
      with:
        name: cvAutoTrack.Depends
        path: ${{github.workspace}}/Release/
  
    - name: Get Current Version
      id: get_new_version
      run: |
        $version = ${{ env.Version }}
        ${{github.workspace}}/ci/upload_core_file.ps1
        
